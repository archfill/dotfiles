# =============================================
# 自動化・インテリジェント機能 (2025 Edition)
# =============================================

# 新しいウィンドウでディレクトリ名を自動設定
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# SSH接続（Sキーは既存のセッション選択と競合するため、ssh-connectに変更）

# ghqベースのプロジェクト選択・セッション作成
bind-key P display-popup -E -w 85% -h 75% '\
    echo "🔍 ghq Project Selector"; \
    echo "========================"; \
    echo; \
    \
    # ghqコマンドの存在確認
    if command -v ghq >/dev/null 2>&1; then \
        echo "📦 Using ghq for repository management..."; \
        ghq_projects=$(ghq list 2>/dev/null); \
        ghq_root=$(ghq root 2>/dev/null); \
        \
        if [ -n "$ghq_projects" ]; then \
            echo "✅ Found $(echo "$ghq_projects" | wc -l) repositories in ghq"; \
            echo; \
            \
            if command -v fzf >/dev/null 2>&1; then \
                selected=$(echo "$ghq_projects" | fzf \
                    --height=90% \
                    --layout=reverse \
                    --border \
                    --prompt="🎯 Select repository: " \
                    --preview-window="right:60%" \
                    --preview="\
                        repo_path=\"$ghq_root/{}\" && \
                        echo \"📁 Repository: {}\" && \
                        echo \"📍 Path: \$repo_path\" && \
                        echo && \
                        if [[ -f \"\$repo_path/README.md\" ]]; then \
                            echo \"📄 README.md:\" && \
                            head -8 \"\$repo_path/README.md\" 2>/dev/null | sed \"s/^/  /\"; \
                        elif [[ -f \"\$repo_path/package.json\" ]]; then \
                            echo \"📦 package.json:\" && \
                            cat \"\$repo_path/package.json\" 2>/dev/null | jq -r \".name, .description, .version\" 2>/dev/null | sed \"s/^/  /\" || echo \"  Node.js project\"; \
                        else \
                            echo \"📂 Directory contents:\" && \
                            ls -la \"\$repo_path\" 2>/dev/null | head -8 | tail -n+2 | sed \"s/^/  /\"; \
                        fi && \
                        echo && \
                        echo \"🔍 Git status:\" && \
                        cd \"\$repo_path\" 2>/dev/null && git log --oneline -3 2>/dev/null | sed \"s/^/  /\" || echo \"  No git history\"\
                    "); \
                \
                if [ -n "$selected" ]; then \
                    project_path="$ghq_root/$selected"; \
                    session_name="$(basename "$selected" | sed \"s/[^a-zA-Z0-9_-]/_/g\")"; \
                    echo; \
                    echo "🚀 Opening project: $selected"; \
                    echo "📂 Path: $project_path"; \
                    echo "🎬 Session: $session_name"; \
                    \
                    # セッション作成または切り替え
                    if tmux has-session -t "$session_name" 2>/dev/null; then \
                        echo "🔄 Switching to existing session: $session_name"; \
                        tmux switch-client -t "$session_name"; \
                    else \
                        echo "🆕 Creating new session: $session_name"; \
                        tmux new-session -d -s "$session_name" -c "$project_path"; \
                        tmux switch-client -t "$session_name"; \
                    fi; \
                else \
                    echo "❌ No repository selected"; \
                fi; \
            else \
                echo "❌ fzf not found. Install fzf for interactive selection."; \
                echo "📋 Available repositories:"; \
                echo "$ghq_projects" | nl; \
            fi; \
        else \
            echo "📭 No repositories found in ghq."; \
            echo "💡 Use \"ghq get <repository-url>\" to add repositories."; \
        fi; \
    else \
        echo "⚠️  ghq not found. Falling back to directory search..."; \
        echo; \
        \
        # フォールバック: 従来のfindベース検索
        project_dirs="$HOME/git $HOME/dotfiles $HOME/dev $HOME/projects"; \
        all_projects=$(find $project_dirs -maxdepth 3 -name ".git" -type d 2>/dev/null | sed "s|/.git||" | sort -u); \
        \
        if [ -n "$all_projects" ]; then \
            echo "✅ Found $(echo "$all_projects" | wc -l) Git projects"; \
            echo; \
            \
            if command -v fzf >/dev/null 2>&1; then \
                selected=$(echo "$all_projects" | fzf --prompt="🎯 Select project: " --preview="echo {} && echo && ls -la {} | head -5"); \
                if [ -n "$selected" ]; then \
                    session_name="$(basename "$selected" | sed \"s/[^a-zA-Z0-9_-]/_/g\")"; \
                    echo "🚀 Opening: $session_name"; \
                    tmux new-session -d -s "$session_name" -c "$selected" 2>/dev/null || tmux switch-client -t "$session_name"; \
                fi; \
            else \
                echo "$all_projects" | nl; \
                echo; \
                echo -n "Enter project number: "; \
                read choice; \
                selected=$(echo "$all_projects" | sed -n "${choice}p"); \
                if [ -n "$selected" ]; then \
                    session_name="$(basename "$selected")"; \
                    tmux new-session -d -s "$session_name" -c "$selected" 2>/dev/null || tmux switch-client -t "$session_name"; \
                fi; \
            fi; \
        else \
            echo "❌ No Git projects found"; \
            echo "💡 Try running \"make ghq-setup\" to set up ghq"; \
        fi; \
    fi; \
    \
    echo; \
    echo "Press any key to close..."; \
    read'

# 高度なセッション管理機能
bind-key S display-popup -E -w 70% -h 60% '\
    echo "🎬 Session Manager"; \
    echo "=================="; \
    echo; \
    \
    current_session=$(tmux display-message -p "#S"); \
    echo "📍 Current session: $current_session"; \
    echo; \
    \
    action=$(echo -e "🆕 Create new session\n🔄 Switch to session\n📋 List all sessions\n❌ Kill session\n💾 Save session layout\n🔄 Restore session layout" | fzf --prompt="Select action: "); \
    \
    case "$action" in \
        "🆕 Create new session") \
            echo; \
            echo -n "Enter new session name: "; \
            read session_name; \
            if [ -n "$session_name" ]; then \
                echo -n "Enter working directory (default: ~): "; \
                read work_dir; \
                work_dir=${work_dir:-~}; \
                echo "Creating session: $session_name in $work_dir"; \
                tmux new-session -d -s "$session_name" -c "$work_dir"; \
                tmux switch-client -t "$session_name"; \
            fi; \
            ;; \
        "🔄 Switch to session") \
            existing_sessions=$(tmux list-sessions -F "#{session_name}" | grep -v "^$current_session$"); \
            if [ -n "$existing_sessions" ]; then \
                selected_session=$(echo "$existing_sessions" | fzf --prompt="Select session: "); \
                if [ -n "$selected_session" ]; then \
                    tmux switch-client -t "$selected_session"; \
                fi; \
            else \
                echo "No other sessions available"; \
            fi; \
            ;; \
        "📋 List all sessions") \
            echo; \
            echo "Active sessions:"; \
            tmux list-sessions; \
            echo; \
            echo "Press any key to continue..."; \
            read; \
            ;; \
        "❌ Kill session") \
            killable_sessions=$(tmux list-sessions -F "#{session_name}" | grep -v "^$current_session$"); \
            if [ -n "$killable_sessions" ]; then \
                selected_session=$(echo "$killable_sessions" | fzf --prompt="Select session to kill: "); \
                if [ -n "$selected_session" ]; then \
                    tmux kill-session -t "$selected_session"; \
                    echo "Session $selected_session killed"; \
                fi; \
            else \
                echo "No other sessions to kill"; \
            fi; \
            ;; \
        "💾 Save session layout") \
            echo; \
            echo -n "Enter layout name: "; \
            read layout_name; \
            if [ -n "$layout_name" ]; then \
                mkdir -p ~/.tmux/layouts; \
                tmux list-windows -F "#{window_index}:#{window_name}:#{window_layout}:#{pane_current_path}" > ~/.tmux/layouts/"$layout_name"; \
                echo "Layout saved as: $layout_name"; \
            fi; \
            ;; \
        "🔄 Restore session layout") \
            if [ -d ~/.tmux/layouts ] && [ "$(ls -A ~/.tmux/layouts)" ]; then \
                layout=$(ls ~/.tmux/layouts | fzf --prompt="Select layout: " --preview="cat ~/.tmux/layouts/{}"); \
                if [ -n "$layout" ]; then \
                    echo "Restoring layout: $layout"; \
                    while IFS=: read -r window_index window_name window_layout pane_path; do \
                        tmux new-window -n "$window_name" -c "$pane_path"; \
                        tmux select-layout "$window_layout" 2>/dev/null || true; \
                    done < ~/.tmux/layouts/"$layout"; \
                fi; \
            else \
                echo "No saved layouts found"; \
            fi; \
            ;; \
    esac'

# 自動レイアウト管理
bind-key a run-shell '\
    pane_count=$(tmux display-message -p "#{window_panes}"); \
    if [ $pane_count -eq 1 ]; then \
        tmux split-window -h; \
    elif [ $pane_count -eq 2 ]; then \
        tmux split-window -v; \
        tmux select-layout main-horizontal; \
    elif [ $pane_count -eq 3 ]; then \
        tmux split-window -h; \
        tmux select-layout tiled; \
    else \
        tmux select-layout tiled; \
    fi'

# ワークスペース保存・復元
bind-key u command-prompt -p "Save workspace as:" \
    "run-shell 'mkdir -p ~/.tmux/workspaces; tmux list-windows -F \"#{window_index}: #{window_name} [#{window_layout}] #{pane_current_path}\" > ~/.tmux/workspaces/%%'"

bind-key U display-popup -E -w 60% -h 40% '\
    echo "=== Restore Workspace ==="; \
    ls ~/.tmux/workspaces/ 2>/dev/null | \
    fzf --preview "cat ~/.tmux/workspaces/{}" | \
    read workspace && \
    echo "Restoring $workspace..." && \
    while IFS= read -r line; do \
        window_info=$(echo "$line" | cut -d: -f1); \
        window_name=$(echo "$line" | sed "s/^[0-9]*: //" | sed "s/ \[.*//"); \
        tmux new-window -n "$window_name"; \
    done < ~/.tmux/workspaces/$workspace'

# 自動ログ監視（qキーに変更してペインリサイズ競合回避）
bind-key q display-popup -E -w 90% -h 90% '\
    echo "=== Log Monitor ==="; \
    if command -v fzf >/dev/null 2>&1; then \
        log_files=$(find /var/log /home -name "*.log" -readable 2>/dev/null | head -20); \
        if [ -n "$log_files" ]; then \
            echo "$log_files" | \
            fzf --preview "tail -20 {} 2>/dev/null" --preview-window=bottom:70% | \
            read logfile && \
            if [ -n "$logfile" ] && [ -r "$logfile" ]; then \
                tmux new-window -n "log:$(basename "$logfile")" "tail -f \"$logfile\""; \
            fi; \
        else \
            echo "No readable log files found"; \
        fi; \
    else \
        echo "fzf not available. Install fzf for interactive log selection."; \
    fi'

# Docker統合
bind-key o display-popup -E -w 90% -h 70% '\
    if command -v docker >/dev/null 2>&1; then \
        docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" 2>/dev/null || echo "Docker daemon not running or no containers"; \
    else \
        echo "Docker not installed"; \
    fi'

bind-key y display-popup -E -w 80% -h 60% '\
    if command -v docker >/dev/null 2>&1 && command -v fzf >/dev/null 2>&1; then \
        containers=$(docker ps --format "{{.Names}}" 2>/dev/null); \
        if [ -n "$containers" ]; then \
            echo "$containers" | \
            fzf --preview "docker logs --tail 20 {} 2>/dev/null" | \
            read container && \
            if [ -n "$container" ]; then \
                tmux new-window -n "logs:$container" "docker logs -f $container"; \
            fi; \
        else \
            echo "No running containers found"; \
        fi; \
    else \
        echo "Docker or fzf not available"; \
    fi'

# 開発環境クイック起動（拡張版）
bind-key d display-popup -E -w 70% -h 50% '\
    current_dir="$(pwd)"; \
    project_name="$(basename "$current_dir")"; \
    timestamp="$(date +%H%M)"; \
    \
    echo "=== Development Environment Setup ==="; \
    echo "📁 Project: $project_name"; \
    echo "📂 Directory: $current_dir"; \
    echo; \
    echo "🔧 1. Basic      - 基本3分割 (メイン + 2作業)"; \
    echo "🎯 2. Quad       - 4分割レイアウト"; \
    echo "📝 3. Editor     - エディタ特化 (70% + サイド)"; \
    echo "🚀 4. Full Dev   - フル開発環境 (4ペイン)"; \
    echo "📊 5. Monitor    - システム監視"; \
    echo "💻 6. Terminal   - ターミナル集約 (2×2)"; \
    echo; \
    echo -n "🎨 Choose layout (1-6): "; \
    read choice; \
    case "$choice" in \
        1) \
            window_name="🔧${project_name}-${timestamp}"; \
            tmux new-window -n "$window_name"; \
            tmux split-window -h; \
            tmux split-window -v; \
            tmux send-keys -t 0 "clear && echo \"📁 Main workspace: $project_name\"" Enter; \
            tmux send-keys -t 1 "clear && echo \"⚡ Task runner ready\"" Enter; \
            tmux send-keys -t 2 "git status" Enter; \
            tmux select-pane -t 0; \
            tmux display-message "🔧 Basic layout created for $project_name"; \
            ;; \
        2) \
            window_name="🎯${project_name}-quad"; \
            tmux new-window -n "$window_name"; \
            tmux split-window -h; \
            tmux split-window -v; \
            tmux select-pane -t 0; \
            tmux split-window -v; \
            tmux send-keys -t 0 "clear && echo \"📝 Editor space\"" Enter; \
            tmux send-keys -t 1 "clear && echo \"🔧 Build/Test\"" Enter; \
            tmux send-keys -t 2 "clear && echo \"🐛 Debug/Log\"" Enter; \
            tmux send-keys -t 3 "git status && echo && git branch" Enter; \
            tmux select-pane -t 0; \
            tmux display-message "🎯 Quad layout created for $project_name"; \
            ;; \
        3) \
            window_name="📝${project_name}-editor"; \
            tmux new-window -n "$window_name"; \
            tmux split-window -h -p 25; \
            tmux split-window -v; \
            tmux send-keys -t 0 "clear && echo \"📝 Editor workspace: $project_name\"" Enter; \
            tmux send-keys -t 1 "clear && echo \"⚡ Quick commands\"" Enter; \
            tmux send-keys -t 2 "git status && echo && git log --oneline -8" Enter; \
            tmux select-pane -t 0; \
            tmux display-message "📝 Editor layout created for $project_name"; \
            ;; \
        4) \
            window_name="🚀${project_name}-full"; \
            tmux new-window -n "$window_name"; \
            tmux split-window -h -p 30; \
            tmux split-window -v; \
            tmux select-pane -t 0; \
            tmux split-window -v -p 25; \
            tmux send-keys -t 0 "clear && echo \"📝 Main editor: $project_name\"" Enter; \
            tmux send-keys -t 1 "clear && echo \"📋 Notes/Scratch\"" Enter; \
            tmux send-keys -t 2 "clear && echo \"🔥 Dev server ready\"" Enter; \
            tmux send-keys -t 3 "git status && echo && git log --oneline -5" Enter; \
            tmux select-pane -t 0; \
            tmux display-message "🚀 Full dev environment created for $project_name"; \
            ;; \
        5) \
            window_name="📊monitor-${timestamp}"; \
            tmux new-window -n "$window_name"; \
            tmux split-window -h; \
            tmux split-window -v; \
            tmux select-pane -t 0; \
            tmux split-window -v; \
            tmux send-keys -t 0 "htop" Enter; \
            tmux send-keys -t 1 "watch -n 2 \"df -h | head -10\"" Enter; \
            tmux send-keys -t 2 "watch -n 3 \"free -h && echo && uptime\"" Enter; \
            tmux send-keys -t 3 "tail -f /var/log/syslog 2>/dev/null || journalctl -f 2>/dev/null || echo \"📊 System monitoring active\"" Enter; \
            tmux select-pane -t 0; \
            tmux display-message "📊 System monitoring started"; \
            ;; \
        6) \
            window_name="💻${project_name}-term"; \
            tmux new-window -n "$window_name"; \
            tmux split-window -h; \
            tmux select-pane -t 0; \
            tmux split-window -v; \
            tmux select-pane -t 2; \
            tmux split-window -v; \
            tmux send-keys -t 0 "clear && echo \"💻 Terminal 1: Main\"" Enter; \
            tmux send-keys -t 1 "clear && echo \"⚡ Terminal 2: Tasks\"" Enter; \
            tmux send-keys -t 2 "clear && echo \"🔧 Terminal 3: Utils\"" Enter; \
            tmux send-keys -t 3 "git status" Enter; \
            tmux select-pane -t 0; \
            tmux display-message "💻 Terminal cluster created for $project_name"; \
            ;; \
        *) \
            window_name="🔧${project_name}-default"; \
            tmux display-message "❌ Invalid choice. Creating basic layout..."; \
            tmux new-window -n "$window_name"; \
            tmux split-window -h; \
            tmux split-window -v; \
            tmux send-keys -t 0 "clear" Enter; \
            tmux send-keys -t 1 "clear" Enter; \
            tmux send-keys -t 2 "git status" Enter; \
            tmux select-pane -t 0; \
            ;; \
    esac'

# =============================================
# 開発者向け高度機能
# =============================================

# Git統合ショートカット
bind-key g display-popup -E -w 80% -h 70% '\
    while true; do \
        clear; \
        echo "=== Git Operations ==="; \
        echo "1. Status  2. Log  3. Diff  4. Branch  5. Add All  6. Commit"; \
        echo "0. Exit"; \
        echo; \
        echo -n "Choose operation (0-6): "; \
        read choice; \
        echo; \
        case "$choice" in \
            0) echo "Exiting..."; break ;; \
            1) echo "Running git status..."; git status ;; \
            2) echo "Running git log..."; git log --oneline -10 ;; \
            3) echo "Running git diff..."; git diff ;; \
            4) echo "Running git branch..."; git branch -a ;; \
            5) echo "Adding all files..."; git add . && echo "All files staged" ;; \
            6) echo "Running git commit..."; git commit ;; \
            "") echo "No choice entered. Exiting..."; break ;; \
            *) echo "Invalid choice: \"$choice\". Please choose 0-6." ;; \
        esac; \
        if [ "$choice" != "0" ] && [ -n "$choice" ]; then \
            echo; echo "Press any key to continue or Ctrl+C to exit..."; read; \
        fi; \
    done'

# ライブリロード開発環境
bind-key z run-shell '\
    tmux new-window -n "dev-env"; \
    tmux split-window -t "dev-env" -h; \
    tmux send-keys -t "dev-env:0" "npm run dev || yarn dev || make dev" Enter; \
    tmux send-keys -t "dev-env:1" "npm run test:watch || yarn test:watch || echo \"No test watch available\"" Enter; \
    tmux split-window -t "dev-env:1" -v; \
    tmux send-keys -t "dev-env:2" "git log --oneline -5" Enter; \
    tmux select-pane -t "dev-env:0"'

# API テスト環境
bind-key t display-popup -E -w 90% -h 80% '\
    echo "=== API Test Environment ==="; \
    echo "Enter API endpoint (or press Enter for localhost:3000):"; \
    read endpoint; \
    endpoint=${endpoint:-localhost:3000}; \
    window_name="api-$(echo $endpoint | sed "s/[^a-zA-Z0-9]/-/g")"; \
    if tmux list-windows | grep -q "$window_name"; then \
        tmux select-window -t "$window_name"; \
    else \
        tmux new-window -n "$window_name"; \
        tmux send-keys -t "$window_name" "echo \"Testing endpoint: $endpoint\"" Enter; \
        tmux send-keys -t "$window_name" "curl -X GET $endpoint/health || curl -X GET $endpoint || echo \"Endpoint not reachable\"" Enter; \
        tmux split-window -t "$window_name" -v; \
        tmux send-keys -t "$window_name:1" "while true; do curl -s $endpoint/health 2>/dev/null | jq . 2>/dev/null || echo \"Waiting for API...\"; sleep 2; done" Enter; \
    fi'

# データベース接続
bind-key b display-popup -E -w 70% -h 50% '\
    echo "=== Database Connections ==="; \
    echo "1. PostgreSQL  2. MySQL  3. MongoDB  4. Redis  5. SQLite"; \
    read -n 1 choice; \
    case $choice in \
        1) tmux new-window -n "postgres" "psql" ;; \
        2) tmux new-window -n "mysql" "mysql" ;; \
        3) tmux new-window -n "mongo" "mongosh" ;; \
        4) tmux new-window -n "redis" "redis-cli" ;; \
        5) echo "Enter SQLite file path:"; read dbfile; tmux new-window -n "sqlite" "sqlite3 $dbfile" ;; \
    esac'

# プロファイリング・デバッグ
bind-key m run-shell '\
    tmux new-window -n "debug"; \
    tmux split-window -t "debug" -h; \
    tmux send-keys -t "debug:0" "htop" Enter; \
    tmux send-keys -t "debug:1" "tail -f /var/log/syslog 2>/dev/null || tail -f /var/log/messages 2>/dev/null || echo \"No system logs available\"" Enter; \
    tmux split-window -t "debug:1" -v; \
    tmux send-keys -t "debug:2" "netstat -tulnp | grep LISTEN" Enter'

# コードレビュー環境
bind-key f display-popup -E -w 95% -h 90% '\
    echo "=== Code Review Environment ==="; \
    git branch -r | sed "s/origin\///" | grep -v HEAD | \
    fzf --preview "git log --oneline origin/{} -10" | \
    read branch && \
    tmux new-window -n "review:$branch"; \
    tmux send-keys -t "review:$branch" "git diff main..$branch" Enter; \
    tmux split-window -t "review:$branch" -h; \
    tmux send-keys -t "review:$branch:1" "git log --oneline main..$branch" Enter'

# パフォーマンス監視
bind-key n run-shell '\
    tmux new-window -n "performance"; \
    tmux split-window -t "performance" -h; \
    tmux split-window -t "performance:0" -v; \
    tmux split-window -t "performance:1" -v; \
    tmux send-keys -t "performance:0" "top" Enter; \
    tmux send-keys -t "performance:1" "iotop 2>/dev/null || echo \"iotop not available\"" Enter; \
    tmux send-keys -t "performance:2" "nethogs 2>/dev/null || echo \"nethogs not available\"" Enter; \
    tmux send-keys -t "performance:3" "vmstat 1" Enter; \
    tmux select-layout -t "performance" tiled'
